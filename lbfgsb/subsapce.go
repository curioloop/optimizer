// Copyright ¬©2025 curioloop. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package lbfgsb

import "math"

const (
	solutionUnknown   = -1
	solutionWithinBox = 0
	solutionBeyondBox = 1
)

// Subroutine optimalDirection (subsm)
//
// This subroutine computes an approximate solution of the subspace problem
//
//	  mﬂÆ‚Çñ(dﬂÆ) ‚â° dﬂÆ·µÄrﬂÆ·∂ú + ¬ΩdﬂÆ·µÄBﬂÆ‚ÇñrﬂÆ·∂ú
//
//	along the subspace unconstrained Newton direction
//
//	  dﬂÆ·µò = -BﬂÆ‚Çñ‚Åª¬πrﬂÆ·∂ú
//
//	then backtrack towards the feasible region to obtain optimal direction (optional)
//
//	  dﬂÆ‚Åé= …ë‚Åé √ó dﬂÆ·µò
//
//	Given the L-BFGS matrix and the Sherman-Morrison formula
//
//	  BﬂÆ‚Çñ = (1/Œ∏)I - (1/Œ∏)Z·µÄW[ (I-(1/Œ∏)MW·µÄZZ·µÄW)‚Åª¬πM ]W·µÄZ(1/Œ∏)
//
//	With N ‚â° I - (1/Œ∏)MW·µÄZZ·µÄW, the formula for the unconstrained Newton direction is
//
//	  dﬂÆ·µò = (1/Œ∏)rﬂÆ·∂ú + (1/Œ∏¬≤)Z·µÄWN‚Åª¬πMZ·µÄW
//
//	Then form middle K = M‚Åª¬πN = (N‚Åª¬πM)‚Åª¬π to avoid inverting N (see formk)
//
//	  dﬂÆ·µò = (1/Œ∏)rﬂÆ·∂ú + (1/Œ∏¬≤)Z·µÄWK‚Åª¬πW·µÄZrﬂÆ·∂ú
//
//	Finally the computation of K‚Åª¬πv could be replaced with solving v = Kx by factorization K = LEL·µÄ
func optimalDirection(loc *iterLoc, spec *iterSpec, ctx *iterCtx) (info errInfo) {

	free := ctx.free
	if free <= 0 {
		return
	}

	n, m, b := spec.n, spec.m, spec.bounds
	col, head := ctx.col, ctx.head

	m2 := 2 * m
	col2 := 2 * col

	inx := ctx.index[0]
	theta := ctx.theta

	// On exit Cauchy point x·∂ú (ctx.z) become the subspace minimizer xÃÇ over the subspace of free variables.
	x := ctx.z
	// On exit reduced gradient rﬂÆ·∂ú (ctx.r) become the Newton direction dﬂÆ·µò
	d := ctx.r
	// xp is used to safeguard the projected Newton direction
	xp := ctx.xp

	// corrections of B
	//  W = [ Y Œ∏S ]   M = [ -D    L·µÄ  ]‚Åª¬π
	//                     [ L   Œ∏S·µÄS  ]
	ws, wy := ctx.ws, ctx.wy // S, Y

	// M‚Åª¬πN = K = LEL·µÄ = [  LL·µÄ          L‚Åª¬π(-La·µÄ+Rz·µÄ)]
	//                   [(-La +Rz)L‚Åª·µÄ   S'AA'SŒ∏      ]
	wn := ctx.wn

	wv := ctx.wa[:m2] // v = K‚Åª¬πW·µÄZrﬂÆ·∂ú (temporary workspace)

	if n < 0 || n > len(x) || n > len(xp) || col < 0 || col > len(wv) ||
		free > len(d) || free > len(x) || free > len(b) || free > len(inx) {
		panic("bound check error")
	}

	log := spec.logger
	if log.enable(LogTrace) {
		log.log("----------------SUBSM entered-----------------\n")
	}

	// Compute v = W·µÄZrﬂÆ·∂ú
	ptr := head
	for i := 0; i < col; i++ {
		yr := zero
		sr := zero
		for j, k := range inx[:free] { // Free variables in Z
			yr += wy[k*m+ptr] * d[j]
			sr += ws[k*m+ptr] * d[j]
		}
		wv[i] = yr
		wv[col+i] = theta * sr
		ptr = (ptr + 1) % m
	}

	// Compute K‚Åª¬πv = (LEL·µÄ)‚Åª¬πv = (L‚Åª·µÄE‚Åª¬πL‚Åª¬π)v
	// L·µÄ stored in the upper triangle of WN
	// E‚Åª¬π = [-I  0]‚Åª¬π = [-I  0]
	//       [ 0  I]     [ 0  I]

	// Compute L‚Åª¬πv by solving Lx = (L·µÄ)·µÄx= v
	if dtrsl(wn, m2, col2, wv, 1, solveUpperT) != 0 {
		return errSingularTriangular
	}
	// Compute E‚Åª¬π(L‚Åª¬πv)
	dscal(col, -one, wv, 1)
	// Compute L‚Åª·µÄ(E‚Åª¬πL‚Åª¬πv) by solving L·µÄx = E‚Åª¬πL‚Åª¬πv
	if dtrsl(wn, m2, col2, wv, 1, solveUpperN) != 0 {
		return errSingularTriangular
	}

	// Compute rﬂÆ·∂ú + (1/Œ∏)Z·µÄW(K‚Åª¬πW·µÄZrﬂÆ·∂ú)
	ptr = head
	for jy := 0; jy < col; jy++ {
		js := col + jy
		for i, k := range inx[:free] { // Free variables in Z
			d[i] += (wy[k*m+ptr] * wv[jy] / theta) + (ws[k*m+ptr] * wv[js])
		}
		ptr = (ptr + 1) % m
	}

	// Scale rﬂÆ·∂ú + (1/Œ∏)Z·µÄWK‚Åª¬πW·µÄZrﬂÆ·∂ú by 1/Œ∏
	for i := 0; i < free; i++ {
		d[i] *= one / theta
	}

	// Let us try the projection
	dcopy(n, x, 1, xp, 1)

	// Perform projection along unconstrained Newton direction dﬂÆ·µò
	// Compute subspace minimizer xÃÇ = ùöôùöõùöòùöì(x·∂ú + dﬂÆ·µò)
	projected := false
	for i, k := range inx[:free] {
		dk := d[i]
		xk := x[k]
		l, u := b[k].Lower, b[k].Upper
		switch b[k].hint {
		case bndNo:
			x[k] = xk + dk // unbound variable
		case bndLow:
			x[k] = math.Max(l, xk+dk)
			projected = projected || x[k] == l
		case bndUp:
			x[k] = math.Min(u, xk+dk)
			projected = projected || x[k] == u
		case bndBoth:
			x[k] = math.Min(u, math.Max(l, xk+dk))
			projected = projected || x[k] == l || x[k] == u
		}
	}

	if projected {
		ctx.word = solutionBeyondBox
	} else {
		ctx.word = solutionWithinBox
		// return
	}

	// Check sign of the directional derivative
	sgn := zero
	if projected {
		xx, gg := loc.x, loc.g // x‚Çñ, g‚Çñ
		if n < 0 || n > len(x) || n > len(xx) || n > len(gg) {
			panic("bound check error")
		}
		for i := 0; i < n; i++ {
			sgn += (x[i] - xx[i]) * gg[i] // (xÃÇ - x‚Çñ) * g‚Çñ
		}
	}

	// sgn ‚â§ 0  ‚áí  dﬂÆ‚Åé = dﬂÆ·µò
	// sgn > 0  ‚áí  dﬂÆ‚Åé = …ë‚Åé √ó dﬂÆ·µò

	// When the direction xÃÇ - x‚Çñ is not a direction of strong descent for the objective function,
	// truncating the path from x‚Çñ to xÃÇ to satisfy the constraints
	if sgn > zero {

		copy(x[:n], xp[:n])

		if log.enable(LogLast) {
			log.log("Positive dir derivative in projection.\n")
			log.log("Using the backtracking step.\n")
		}

		// search positive optimal step
		// …ë‚Åé = ùöñùöäùö° { …ë : …ë ‚â§ 1, l·µ¢ - x·∂ú·µ¢ ‚â§ …ë √ó dﬂÆ·µò·µ¢ ‚â§ u·µ¢ - x·∂ú·µ¢ (i ‚àà ùìï) }
		alpha := one

		stp := alpha
		ibd := 0
		for i, k := range inx[:free] {
			dk := d[i]
			bk := b[k]
			if bk.hint != bndNo {
				if dk < zero && bk.hint <= bndBoth {
					if span := bk.Lower - x[k]; span >= 0 {
						stp = zero
					} else if dk*alpha < span {
						stp = span / dk
					}
				} else if dk > zero && bk.hint >= bndBoth {
					if span := bk.Upper - x[k]; span <= 0 {
						stp = zero
					} else if dk*alpha > span {
						stp = span / dk
					}
				}
				if stp < alpha {
					alpha = stp
					ibd = i
				}
			}
		}

		if alpha < one {
			dk := d[ibd]
			k := inx[ibd]
			if dk > zero {
				x[k] = b[k].Upper
				d[ibd] = zero
			} else if dk < zero {
				x[k] = b[k].Lower
				d[ibd] = zero
			}
		}

		// xÃÇ = x·∂ú + dﬂÆ‚Åé = x·∂ú + (…ë‚Åé √ó dﬂÆ·µò)
		//   xÃÇ·µ¢ = x·∂ú·µ¢         if i ‚àâ ùìï
		//   xÃÇ·µ¢ = x·∂ú·µ¢ + ZdﬂÆ‚Åé·µ¢  otherwise
		for i, k := range inx[:free] {
			x[k] += alpha * d[i]
		}
	}

	if log.enable(LogTrace) {
		log.log("----------------exit SUBSM --------------------\n")
	}

	return
}

// Subroutine reduceGradient (cmprlb)
//
// This subroutine computes rﬂÆ·∂ú = -Z·µÄ(g + B(x·∂ú - x‚Çñ))
func reduceGradient(loc *iterLoc, spec *iterSpec, ctx *iterCtx) (info errInfo) {

	x, g := loc.x, loc.g
	n, m := spec.n, spec.m

	theta := ctx.theta
	index := ctx.index[0]
	col, head, free := ctx.col, ctx.head, ctx.free

	// corrections of B
	//  W = [ Y Œ∏S ]   M = [ -D    L·µÄ  ]‚Åª¬π
	//                     [ L   Œ∏S·µÄS  ]

	z := ctx.z // x·∂ú
	r := ctx.r // r = -r·∂ú = -Z·µÄ(g + Œ∏(x·∂ú-x) - WMc) = Z·µÄ(-g - Œ∏(x·∂ú-x) + WMc)

	c := ctx.wa[2*m : 4*m] // c = W·µÄ(x·∂ú - x)
	v := ctx.wa[:2*m]      // v = Mc (temporary workspace for subroutine bmv)

	if (n < 0 || n > len(r) || n > len(g)) || (col < 0 || col > len(v)) ||
		(free < 0 || free > len(r)) || (len(z) != len(x) || len(z) != len(g)) {
		panic("bound check error")
	}

	if !ctx.constrained && col > 0 {
		// If the problem is unconstrained and `col > 0`, set r = -g
		for i := 0; i < n; i++ {
			r[i] = -g[i]
		}
	} else {
		// Compute r = -Œ∏(x·∂ú-x) - g for free variables
		for i, k := range index[:free] {
			r[i] = -theta*(z[k]-x[k]) - g[k]
		}

		// Compute v = Mc
		if info = bmv(spec, ctx, c, v); info != ok {
			return
		}

		// Compute r += WMc
		ptr := head
		ws, wy := ctx.ws, ctx.wy
		for j := 0; j < col; j++ {
			mc1, mc2 := v[j], theta*v[col+j]
			for i, k := range index[:free] {
				r[i] += wy[k*m+ptr]*mc1 + ws[k*m+ptr]*mc2 // [ Y Œ∏S ]·µÄ[ Mc‚ÇÅ Mc‚ÇÇ ]
			}
			ptr = (ptr + 1) % m
		}
	}

	return
}
